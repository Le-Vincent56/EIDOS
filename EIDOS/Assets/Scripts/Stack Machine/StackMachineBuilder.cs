namespace EIDOS.Stack_Machine
{
    public class StackMachineBuilder
    {
        private readonly StackMachineConfig config = new StackMachineConfig();

        /// <summary>
        /// Enables or disables debug mode for the stack machine.
        /// When debug mode is enabled, additional diagnostic and debugging information may be logged during the machine's operation.
        /// </summary>
        /// <param name="debug">A boolean indicating whether to enable debug mode. Defaults to true.</param>
        /// <returns>An instance of <see cref="StackMachineBuilder"/> with the updated debug configuration.</returns>
        public StackMachineBuilder WithDebug(bool debug = true)
        {
            config.Debug = debug;
            return this;
        }

        /// <summary>
        /// Configures the stack machine to exit the current state before pushing a new state.
        /// When this setting is enabled, the current state will be exited before the new state is pushed.
        /// </summary>
        /// <param name="exitOnPush">
        /// A boolean indicating whether the stack machine should exit the current state before pushing a new state.
        /// Defaults to true.
        /// </param>
        /// <returns>An instance of <see cref="StackMachineBuilder"/> with the updated exit behavior configuration.</returns>
        public StackMachineBuilder WithExitOnPush(bool exitOnPush = true)
        {
            config.ExitOnPush = exitOnPush;
            return this;
        }

        /// <summary>
        /// Configures the stack machine to reenter the current state after a pop operation.
        /// When this setting is enabled, the current state after the pop operation will be reentered.
        /// </summary>
        /// <param name="reenterOnPop">
        /// A boolean indicating whether the stack machine should re-enter the current state after a pop operation.
        /// Defaults to true.
        /// </param>
        /// <returns>An instance of <see cref="StackMachineBuilder"/> with the updated re-enter behavior configuration.</returns>
        public StackMachineBuilder WithReenterOnPop(bool reenterOnPop = true)
        {
            config.ReenterOnPop = reenterOnPop;
            return this;       
        }

        /// <summary>
        /// Configures the log prefix to be used by the stack machine.
        /// The log prefix provides a custom string that will be prepended to log messages generated by the stack machine.
        /// </summary>
        /// <param name="logPrefix">The string to set as the log prefix for the stack machine.</param>
        /// <returns>An instance of <see cref="StackMachineBuilder"/> with the updated log prefix setting.</returns>
        public StackMachineBuilder WithLogPrefix(string logPrefix)
        {
            config.LogPrefix = logPrefix;
            return this;
        }

        /// <summary>
        /// Creates a new instance of <see cref="StackMachine"/> configured for synchronous operations.
        /// The returned instance uses the current builder configuration.
        /// </summary>
        /// <returns>An instance of <see cref="StackMachine"/> configured with the builder's current settings.</returns>
        public StackMachine BuildSync() => new StackMachine(config);

        /// <summary>
        /// Creates a new instance of <see cref="AsyncStackMachine"/> configured for asynchronous operations.
        /// The returned instance uses the current builder configuration.
        /// </summary>
        /// <returns>An instance of <see cref="AsyncStackMachine"/> configured with the builder's current settings.</returns>
        public AsyncStackMachine BuildAsync() => new AsyncStackMachine(config);

        #region FACTORY METHODS FOR COMMON CONFIGURATIONS
        /// <summary>
        /// Creates a new instance of <see cref="StackMachine"/> with default configuration.
        /// The returned instance is initialized with basic settings suitable for general synchronous operations.
        /// </summary>
        /// <returns>An instance of <see cref="StackMachine"/> with default configuration.</returns>
        public static StackMachine CreateBasicSync()
        {
            return new StackMachineBuilder().BuildSync();
        }

        /// <summary>
        /// Creates a new instance of <see cref="AsyncStackMachine"/> with default configuration.
        /// The returned instance is initialized with basic settings suitable for general asynchronous operations.
        /// </summary>
        /// <returns>An instance of <see cref="AsyncStackMachine"/> with default configuration.</returns>
        public static AsyncStackMachine CreateBasicAsync()
        {
            return new StackMachineBuilder().BuildAsync();
        }

        /// <summary>
        /// Creates a new instance of <see cref="StackMachine"/> configured for debugging.
        /// The returned instance is initialized with debug mode enabled and a logging prefix "[Stack Machine]".
        /// </summary>
        /// <returns>A configured instance of <see cref="StackMachine"/> for debugging purposes.</returns>
        public static StackMachine CreateDebugSync()
        {
            return new StackMachineBuilder()
                .WithDebug()
                .WithLogPrefix("[Stack Machine]")
                .BuildSync();
        }

        /// <summary>
        /// Creates a new instance of <see cref="AsyncStackMachine"/> configured for debugging.
        /// The returned instance is initialized with debug mode enabled and a logging prefix "[Async Stack Machine]".
        /// </summary>
        /// <returns>A configured instance of <see cref="AsyncStackMachine"/> for debugging purposes.</returns>
        public static AsyncStackMachine CreateDebugAsync()
        {
            return new StackMachineBuilder()
                .WithDebug()
                .WithLogPrefix("[Async Stack Machine]")
                .BuildAsync();
        }
        #endregion
    }
}